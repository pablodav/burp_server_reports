# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/pablodav/burp_server_reports
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    #environment:
    #  CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
    #  CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    #  TOX_PY34: 3.4.3
    #  TOX_PY35: 3.5.2
    #  TOX_PY36: 3.6.1
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    # https://circleci.com/docs/2.0/building-docker-images/
    - setup_remote_docker
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # This is based on your 1.0 configuration file or project settings
    - run:
        working_directory: ~/pablodav/burp_server_reports
        command: echo -e "export TOX_PY34=3.4.3\nexport TOX_PY35=3.5.2\nexport TOX_PY36=3.6.1" >> $BASH_ENV
    - run:
        working_directory: ~/pablodav/burp_server_reports
        command: 'sudo docker info >/dev/null 2>&1 || sudo service docker start; '
    # This is based on your 1.0 configuration file or project settings
    - run: pip -V
    - run: pip install -U pip
    - run: pip install --upgrade tox
    - run: pip install --upgrade tox-pyenv
    - run: pyenv local $TOX_PY34 $TOX_PY35 $TOX_PY36
    - run: docker pull greenmail/standalone:1.5.5
    - run: docker run -d -p 3025:3025 -p 3110:3110 -p 3143:3143 -p 3465:3465 -p 3993:3993 -p 3995:3995 greenmail/standalone:1.5.5
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: tox -v --recreate
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
